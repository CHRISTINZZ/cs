#include <stdio.h>

struct Process {
    int pid;
    int burstTime;
    int remainingTime;
    int turnaroundTime;
    int waitingTime;
};

void roundRobinScheduling(struct Process processes[], int n, int timeQuantum) {
    int i, count, totalTime = 0, remaining = n;
    
    
    for (i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
    }
    
  
    while (remaining > 0) {
        for (i = 0, count = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                if (processes[i].remainingTime > timeQuantum) {
                    totalTime += timeQuantum;
                    processes[i].remainingTime -= timeQuantum;
                } else {
                    totalTime += processes[i].remainingTime;
                    processes[i].waitingTime = totalTime - processes[i].burstTime;
                    processes[i].remainingTime = 0;
                    remaining--;
                }
                count = 1;  
            }
        }
        if (count == 0) {
            // If no processes were executed, increment the total time
            totalTime++;
        }
    }
    
   
    for (i = 0; i < n; i++) {
        processes[i].turnaroundTime = processes[i].burstTime + processes[i].waitingTime;
    }
}

int main() {
    int n, i, timeQuantum;
    float avgTurnaroundTime = 0, avgWaitingTime = 0;
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];
    
    
    for (i = 0; i < n; i++) {
        printf("\nProcess %d\n", i + 1);
        printf("Enter the Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        processes[i].pid = i + 1;
    }
    
    printf("\nEnter the Time Quantum: ");
    scanf("%d", &timeQuantum);
    
    
    roundRobinScheduling(processes, n, timeQuantum);
    

    printf("\nProcess\tBurst Time\tTurnaround Time\tWaiting Time\n");
    
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burstTime,
               processes[i].turnaroundTime, processes[i].waitingTime);
        
        avgTurnaroundTime += processes[i].turnaroundTime;
        avgWaitingTime += processes[i].waitingTime;
    }
    
    avgTurnaroundTime /= n;
    avgWaitingTime /= n;
    
    printf("\nAverage Turnaround Time: %.2f", avgTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f", avgWaitingTime);
    
    return 0;
}
